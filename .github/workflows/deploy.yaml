name: Deploy Website to Server via SSH

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up SSH key for authentication
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/duwin.pem
          chmod 600 ~/.ssh/duwin.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # Step 3: SSH into the server and execute the deployment commands
      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/duwin.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            
            REPO_NAME=${{ github.repository }}
            REPO_NAME=${REPO_NAME//\//_} # Replace "/" in repo name
            
            # Create the directory if it doesn't exist (using sudo)
            if [ ! -d "/var/www/$REPO_NAME" ]; then
              echo "Directory /var/www/$REPO_NAME does not exist. Creating it now."
              sudo mkdir -p /var/www/$REPO_NAME
              sudo chown $USER:$USER /var/www/$REPO_NAME
            else
              echo "Directory /var/www/$REPO_NAME already exists."
            fi

            # Navigate to the project directory
            cd /var/www/$REPO_NAME

            # If this is a new project or the directory is not a Git repository, clone it
            if [ ! -d ".git" ]; then
              echo "No Git repository found, cleaning the directory and cloning the repository..."
              rm -rf /var/www/$REPO_NAME/* # Clean the existing files
              git clone https://github.com/${{ github.repository }} .
            else
              echo "Git repository exists, pulling the latest changes..."
              git pull origin main
            fi

            # Install necessary dependencies if package.json is found
            if [ -f "package.json" ]; then
              echo "Installing npm dependencies..."
              npm install
            else
              echo "No package.json found, skipping npm install."
            fi

            # Restart the application using PM2 if processes are running
            if pm2 list | grep -q "$REPO_NAME"; then
              echo "PM2 processes found, restarting all..."
              pm2 restart all
            else
              echo "No PM2 processes found, starting application..."
              pm2 start npm --name "$REPO_NAME" -- start
            fi
            
          # Ensure deploy.sh has execute permissions before running it
            sudo chmod +x ./deploy.sh

            # Run Apache and SSL Configuration Script from /home/ubuntu
            if [ -f "./deploy.sh" ]; then
              echo "Running Apache and SSL configuration script..."
              sudo ./deploy.sh $REPO_NAME ${{ secrets.DOMAIN }}
            else
              echo "deploy.sh not found in /home/ubuntu. Skipping Apache configuration."
            fi

          EOF

      # Step 4: Clean up SSH key
      - name: Clean up SSH key
        run: rm -f ~/.ssh/duwin.pem
